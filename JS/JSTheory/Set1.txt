1. What is JavaScript?
JavaScript is a lightweight, interpreted scripting language used for making web pages interactive. It runs in browsers and can be used for both frontend (React, Angular) and backend (Node.js) development.


2. Difference Between Java and JavaScript
Java is a compiled, object-oriented programming language that runs on the Java Virtual Machine (JVM), making it platform-independent. It is mainly used for enterprise applications, Android development, and large-scale systems.
JavaScript, on the other hand, is a lightweight, interpreted scripting language primarily used for web development. It runs in browsers and does not require compilation.


3. How to Link a JavaScript File to an HTML Document?
<script src="script.js"></script>


4. Difference Between var, let, and const
var: Function-scoped, hoisted with undefined, can be redeclared and reassigned.  
let: Block-scoped, hoisted but not initialized, cannot be redeclared, but can be reassigned. Recommended for variables that need updates.
const: Block-scoped, hoisted but not initialized, cannot be redeclared or reassigned. Used for constants that should not change.


5. List the Primitive Data Types in JavaScript
JavaScript has seven primitive data types:
String – Represents text, e.g., "Hello"
Number – Represents numeric values, e.g., 42, 3.14
BigInt – Used for very large numbers, e.g., 123n
Boolean – Represents true or false
Undefined – A variable declared but not assigned a value
Null – Represents an intentional absence of value
Symbol – Used for unique identifiers


6. What is the Difference Between null and undefined?
null: Represents an intentional absence of a value. It must be assigned explicitly.
let a = null;
console.log(a); //Output: null
undefined: Represents a variable that has been declared but not assigned a value.
let b;
console.log(b); //Output: undefined


7. How Would You Check the Type of a Variable in JavaScript?
The typeof operator is used to check the type of a variable.
console.log(typeof "Hello");        Output: string
console.log(typeof 42);             Output: number
console.log(typeof true);           Output: boolean
console.log(typeof undefined);      Output: undefined
console.log(typeof null);           Output: object (historical bug in JavaScript)
console.log(typeof Symbol("id"));   Output: symbol


8. What Are JavaScript Arrays and How Are They Different from Objects?
Arrays are ordered collections of elements, indexed numerically starting from 0. They are used to store multiple values in a single variable.
let fruits = ["Apple", "Banana", "Cherry"];
console.log(fruits[1]); // Output: Banana
Objects are collections of key-value pairs, where keys are strings (or symbols) and values can be of any type.
let person = { name: "John", age: 30 };
console.log(person.name); // Output: John
Arrays are best for ordered lists, while objects are better for structured data with named properties.
Arrays have built-in methods like push(), pop(), and map(), whereas objects use key-value pair manipulations.


9. How Do You Declare a Function in JavaScript?
A function in JavaScript can be declared using the function keyword or as an arrow function.
Function Declaration
function greet(name) {
    return "Hello, " + name;
}
console.log(greet("Alice")); // Output: Hello, Alice
Function Expression
const greet = function(name) {
    return "Hello, " + name;
};
console.log(greet("Bob")); // Output: Hello, Bob

Arrow Function (ES6)
const greet = (name) => `Hello, ${name}`;
console.log(greet("Charlie"));


10. What Is a Callback Function?
A callback function is a function passed as an argument to another function and executed later. It is commonly used in asynchronous operations like API calls and event handling.
function fetchData(callback) {
    setTimeout(() => {
        console.log("Data fetched");
        callback(); // Executes after fetching data
    }, 2000);
}

fetchData(() => console.log("Callback executed"));


11. What Is the Difference Between Local and Global Scope?
Local Scope: Variables declared inside a function/block are only accessible within that function/block.
Global Scope: Variables declared outside any function are accessible throughout the script.
let globalVar = "I am global"; // Global variable
function example() {
    let localVar = "I am local"; // Local variable
    console.log(globalVar); // ✅ Accessible
    console.log(localVar);  // ✅ Accessible
}
console.log(globalVar); // ✅ Accessible
console.log(localVar);  // ❌ Error: localVar is not defined


12. How Do You Create an Immediately Invoked Function Expression (IIFE)?
An IIFE (Immediately Invoked Function Expression) is a function that runs as soon as it is defined. It helps avoid polluting the global scope.
(function () {
    console.log("IIFE executed!");
})();  // Output: IIFE executed!

With Arrow Function:
(() => {
    console.log("Arrow IIFE executed!");
})();
IIFEs are commonly used for encapsulation and to create a private scope for variables


13. Explain the Difference Between == and === ?
Loose Equality == : Compares values after type conversion (coercion).
console.log(5 == "5"); //✅ true (Type conversion happens)
Strict Equality === : Compares values without type conversion (must be of the same type).
console.log(5 === "5"); //❌ false (Different types: number vs string)\

14. What Are the Different Types of Loops in JavaScript?
JavaScript provides several types of loops for iteration:
for Loop – Runs a block of code a specific number of times.
for (let i = 0; i < 5; i++) {
    console.log(i);
}

while Loop – Runs as long as the condition is true.
let i = 0;
while (i < 5) {
    console.log(i);
    i++;
}

do...while Loop – Executes at least once, even if the condition is false.
let i = 0;
do {
    console.log(i);
    i++;
} while (i < 5);

for...in Loop – Iterates over object properties.
let obj = { name: "Alice", age: 25 };
for (let key in obj) {
    console.log(key, obj[key]);
}

for...of Loop – Iterates over iterable objects like arrays.
let arr = ["a", "b", "c"];
for (let value of arr) {
    console.log(value);
}

15. How Do You Write a switch Statement in JavaScript?
A switch statement is used for multiple conditional checks based on a single value.
let day = "Monday";
switch (day) {
    case "Monday":
        console.log("Start of the week!");
        break;
    case "Friday":
        console.log("Weekend is near!");
        break;
    default:
        console.log("Regular day");
}


16. What is the DOM?
The Document Object Model (DOM) is a structured representation of an HTML document, allowing JavaScript to interact with and modify web pages dynamically. It represents the document as a tree of objects, where each HTML element is a node that can be accessed and manipulated.


17. How Can You Select an Element by Its ID Using JavaScript?
let heading = document.getElementById("title");
console.log(heading.textContent);
Alternatively, you can use querySelector (modern approach):
OR
let heading = document.querySelector("#title");



18. How Would You Add a New Element to the DOM?
let newElement = document.createElement("p");
newElement.textContent = "This is a new paragraph";
document.body.appendChild(newElement);
OR
document.body.innerHTML += "<p>This is a new paragraph</p>";



19. What is the Difference Between textContent and innerHTML?
textContent: Sets or gets only the text inside an element. It does not parse HTML.
let div = document.getElementById("example");
div.textContent = "<b>Hello</b>"; // Displays as "<b>Hello</b>" (No formatting)
innerHTML: Sets or gets the HTML content, parsing any HTML tags inside the string.
OR
div.innerHTML = "<b>Hello</b>"; // Displays as **Hello** (Formatted)



20. How do you select an element by its ID, class, or tag name?
let element = document.getElementById("myDiv"); 
let elementsByClass = document.getElementsByClassName("myClass"); 
let elementsByTag = document.getElementsByTagName("p");
let firstMatch = document.querySelector(".myClass"); 
let allMatches = document.querySelectorAll(".myClass"); 



21. What is the difference between getElementById() and querySelector()?
getElementById("id") only selects one element by ID.
querySelector("selector") selects the first element that matches a CSS selector.
document.getElementById("title"); // Selects element by ID
document.querySelector("#title"); // Also selects by ID
document.querySelector(".box");   // Selects the first element with class "box"



22. How do you change the style of an element using JavaScript?
document.getElementById("box").style.backgroundColor = "blue";
document.getElementById("box").style.fontSize = "20px";



23.How do you add a CSS class to an element dynamically?
document.getElementById("box").classList.add("highlight");



24.How do you remove an element from the DOM?
Use .remove() or .removeChild():
document.getElementById("box").remove(); 
or
let parent = document.getElementById("container");
let child = document.getElementById("box");
parent.removeChild(child);



25. What is the difference between appendChild() and append()?
appendChild(): Adds one node (cannot append text).
append(): Can add multiple elements and text.
let div = document.createElement("div");
div.append("Text ", document.createElement("span"));



26.How do you handle events using JavaScript?
Use .addEventListener():
document.getElementById("btn").addEventListener("click", function() {
    alert("Button clicked!");
});



27. What is event delegation, and why is it useful?
Event delegation is a technique where you attach a single event listener to a parent element to handle events for its children.
document.getElementById("list").addEventListener("click", function(event) {
    if (event.target.tagName === "LI") {
        alert(event.target.textContent);
    }
});
It is useful for dynamic elements and performance optimization.



28. How do you prevent the default behavior of an event?
document.getElementById("link").addEventListener("click", function(event) {
    event.preventDefault();
    alert("Link click prevented!");
});



29. What are event bubbling and event capturing in JavaScript?
Bubbling: Event propagates from child to parent.
Capturing: Event propagates from parent to child.
By default, JavaScript uses bubbling. You can use true in addEventListener to enable capturing.
document.getElementById("child").addEventListener("click", function() {
    console.log("Child clicked");
}, true); // Capturing phase

document.getElementById("parent").addEventListener("click", function() {
    console.log("Parent clicked");
},false); 



30. How do you use addEventListener() to attach multiple event handlers?
let btn = document.getElementById("btn");
btn.addEventListener("click", () => console.log("Clicked"));
btn.addEventListener("mouseover", () => console.log("Hovered"));



31. What is the difference between removeChild() and replaceChild()?
removeChild(): Removes an element.
replaceChild(): Replaces an element with another.
let parent = document.getElementById("container");
let oldChild = document.getElementById("box");
let newChild = document.createElement("div");
newChild.textContent = "New Box";
parent.replaceChild(newChild, oldChild);



32. How do you create and dispatch custom events in JavaScript?
Use new Event() or CustomEvent().
let event = new Event("customEvent");
document.getElementById("box").dispatchEvent(event);

document.getElementById("box").addEventListener("customEvent", () => {
    console.log("Custom event triggered");
});



33. How do you create an object in JavaScript?
Object Literal: { name: "John", age: 25 }
Constructor Function: function Person(name) { this.name = name; }
Object.create(): let obj = Object.create(prototypeObj);



34. What is a prototype in JavaScript and why is it important?
A prototype is an object from which other objects inherit properties and methods.Enables inheritance and memory efficiency by sharing methods.
function Person(name) { this.name = name; }
Person.prototype.greet = function() { console.log("Hello, " + this.name); };
let p = new Person("John");
p.greet();  // Output: Hello, John



35. How can you add a method to an existing object?
obj.methodName = function() { console.log("Hello!"); };
Using prototype (for constructor-based objects):
Person.prototype.sayHi = function() { console.log("Hi!"); };



36. What is a JavaScript exception?
A JavaScript exception is an error that occurs during code execution, disrupting normal flow.
Common exceptions:
ReferenceError – Accessing an undefined variable.
TypeError – Performing an invalid operation on a data type.
SyntaxError – Incorrect JavaScript syntax.



37. How do you handle exceptions in JavaScript?
Exceptions are handled using try-catch-finally and throw statements.
try {
    let result = 10 / 0;  // No error, but avoidable
    console.log(result);
    console.log(undefinedVariable);  // Will cause an error
} catch (error) {
    console.error("An error occurred:", error.message);
} finally {
    console.log("This runs regardless of an error.");
}
try – Wraps code that might throw an error.
catch – Handles the error if one occurs.
finally – Always executes (optional).
throw – Manually triggers an error.



38. What is "hoisting" in JavaScript?
Hoisting is JavaScript's default behavior of moving variable and function declarations to the top of their scope before execution.
console.log(x);  // Output: undefined (Hoisted, but not initialized)
var x = 10;



39. What does the this keyword refer to in JavaScript?
The this keyword refers to the execution context of a function.

Global Context (window in browsers, global in Node.js):
console.log(this);  // Refers to the global object (window in browsers)

Inside an Object (Refers to the Object):
let obj = {  
    name: "John",  
    getName: function() {  
        console.log(this.name);  // "John"
    }
};
obj.getName();

Inside a Regular Function (Default to Global Object or undefined in strict mode):
function showThis() {  
    console.log(this);  
}
showThis();  // Window (or undefined in strict mode)

Inside an Arrow Function (Inherits from Parent Scope, Does NOT bind its own this):
let obj = {  
    name: "John",  
    getName: () => {  
        console.log(this.name);  // Undefined (inherits from global scope)
    }
};
obj.getName();

Inside a Constructor Function (Refers to the new Object Created):
function Person(name) {  
    this.name = name;
}
let p = new Person("John");
console.log(p.name);  // "John"

Using call(), apply(), and bind() to Explicitly Set this:
function greet() {  
    console.log(this.name);
}
let user = { name: "Alice" };
greet.call(user);  // "Alice"